// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"
#include "Constants.h"
#include "../Robot.h"
#include "ArmJoint.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ArmJoint::ArmJoint() : frc::Subsystem("ArmJoint") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    talonSRX = RobotMap::armJointTalonSRX;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Init();
}

void ArmJoint::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ArmJoint::Periodic() {
    // Put code here to be run every loop

}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void ArmJoint::Move(){
	double leftYstick = Robot::oi->getJoystick()->GetY();

	frc::SmartDashboard::PutString("DB/String 0",std::to_string(leftYstick));
	targetPositionRotations = leftYstick * 10.0 * 4096; /* 50 Rotations in either direction */
				talonSRX->Set(ControlMode::Position, targetPositionRotations); /* 50 rotations in either direction */
}
void ArmJoint::Init(){
	/* lets grab the 360 degree position of the MagEncoder's absolute position */
			int absolutePosition = talonSRX->GetSelectedSensorPosition(0) & 0xFFF; /* mask out the bottom12 bits, we don't care about the wrap arounds */
			/* use the low level API to set the quad encoder signal */
			talonSRX->SetSelectedSensorPosition(absolutePosition, kPIDLoopIdx, kTimeoutMs);

			/* choose the sensor and sensor direction */
			talonSRX->ConfigSelectedFeedbackSensor(FeedbackDevice::CTRE_MagEncoder_Relative, kPIDLoopIdx, kTimeoutMs);
			talonSRX->SetSensorPhase(true);

			/* set the peak and nominal outputs, 12V means full */
			talonSRX->ConfigNominalOutputForward(0, kTimeoutMs);
			talonSRX->ConfigNominalOutputReverse(0, kTimeoutMs);
			talonSRX->ConfigPeakOutputForward(1, kTimeoutMs);
			talonSRX->ConfigPeakOutputReverse(-1, kTimeoutMs);

			/* set closed loop gains in slot0 */
			talonSRX->Config_kF(kPIDLoopIdx, 0.0, kTimeoutMs);
			talonSRX->Config_kP(kPIDLoopIdx, 0.1, kTimeoutMs);
			talonSRX->Config_kI(kPIDLoopIdx, 0.0, kTimeoutMs);
			talonSRX->Config_kD(kPIDLoopIdx, 0.0, kTimeoutMs);
}
